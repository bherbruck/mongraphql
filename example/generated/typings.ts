/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */







declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  NonNullCommentInput: { // input type
    content: string; // String!
    postId: string; // ID!
  }
  NonNullPostInput: { // input type
    authorId: string; // ID!
    content: string; // String!
    title: string; // String!
  }
  NonNullUserInput: { // input type
    name: string; // String!
  }
  NullableCommentInput: { // input type
    _id?: string | null; // ID
    content?: string | null; // String
    postId?: string | null; // ID
  }
  NullablePostInput: { // input type
    _id?: string | null; // ID
    authorId?: string | null; // ID
    content?: string | null; // String
    title?: string | null; // String
  }
  NullableUserInput: { // input type
    _id?: string | null; // ID
    name?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
}

export interface NexusGenObjects {
  Comment: { // root type
    _id: string; // ID!
    content: string; // String!
  }
  Mutation: {};
  Post: { // root type
    _id: string; // ID!
    content: string; // String!
    title: string; // String!
  }
  Query: {};
  User: { // root type
    _id: string; // ID!
    name: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Comment: { // field return type
    _id: string; // ID!
    content: string; // String!
    post: NexusGenRootTypes['Post']; // Post!
  }
  Mutation: { // field return type
    createComment: NexusGenRootTypes['Comment'] | null; // Comment
    createPost: NexusGenRootTypes['Post'] | null; // Post
    createUser: NexusGenRootTypes['User'] | null; // User
    deleteComment: boolean | null; // Boolean
    deletePost: boolean | null; // Boolean
    deleteUser: boolean | null; // Boolean
    updateComment: NexusGenRootTypes['Comment'] | null; // Comment
    updatePost: NexusGenRootTypes['Post'] | null; // Post
    updateUser: NexusGenRootTypes['User'] | null; // User
  }
  Post: { // field return type
    _id: string; // ID!
    author: NexusGenRootTypes['User']; // User!
    comments: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    content: string; // String!
    title: string; // String!
  }
  Query: { // field return type
    comment: NexusGenRootTypes['Comment'] | null; // Comment
    comments: Array<NexusGenRootTypes['Comment'] | null> | null; // [Comment]
    post: NexusGenRootTypes['Post'] | null; // Post
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
    user: NexusGenRootTypes['User'] | null; // User
    users: Array<NexusGenRootTypes['User'] | null> | null; // [User]
  }
  User: { // field return type
    _id: string; // ID!
    name: string; // String!
    posts: Array<NexusGenRootTypes['Post'] | null> | null; // [Post]
  }
}

export interface NexusGenFieldTypeNames {
  Comment: { // field return type name
    _id: 'ID'
    content: 'String'
    post: 'Post'
  }
  Mutation: { // field return type name
    createComment: 'Comment'
    createPost: 'Post'
    createUser: 'User'
    deleteComment: 'Boolean'
    deletePost: 'Boolean'
    deleteUser: 'Boolean'
    updateComment: 'Comment'
    updatePost: 'Post'
    updateUser: 'User'
  }
  Post: { // field return type name
    _id: 'ID'
    author: 'User'
    comments: 'Comment'
    content: 'String'
    title: 'String'
  }
  Query: { // field return type name
    comment: 'Comment'
    comments: 'Comment'
    post: 'Post'
    posts: 'Post'
    user: 'User'
    users: 'User'
  }
  User: { // field return type name
    _id: 'ID'
    name: 'String'
    posts: 'Post'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createComment: { // args
      data?: NexusGenInputs['NonNullCommentInput'] | null; // NonNullCommentInput
    }
    createPost: { // args
      data?: NexusGenInputs['NonNullPostInput'] | null; // NonNullPostInput
    }
    createUser: { // args
      data?: NexusGenInputs['NonNullUserInput'] | null; // NonNullUserInput
    }
    deleteComment: { // args
      _id?: string | null; // String
    }
    deletePost: { // args
      _id?: string | null; // String
    }
    deleteUser: { // args
      _id?: string | null; // String
    }
    updateComment: { // args
      _id?: string | null; // String
      data?: NexusGenInputs['NullableCommentInput'] | null; // NullableCommentInput
    }
    updatePost: { // args
      _id?: string | null; // String
      data?: NexusGenInputs['NullablePostInput'] | null; // NullablePostInput
    }
    updateUser: { // args
      _id?: string | null; // String
      data?: NexusGenInputs['NullableUserInput'] | null; // NullableUserInput
    }
  }
  Query: {
    comment: { // args
      query?: NexusGenInputs['NullableCommentInput'] | null; // NullableCommentInput
    }
    comments: { // args
      query?: NexusGenInputs['NullableCommentInput'] | null; // NullableCommentInput
    }
    post: { // args
      query?: NexusGenInputs['NullablePostInput'] | null; // NullablePostInput
    }
    posts: { // args
      query?: NexusGenInputs['NullablePostInput'] | null; // NullablePostInput
    }
    user: { // args
      query?: NexusGenInputs['NullableUserInput'] | null; // NullableUserInput
    }
    users: { // args
      query?: NexusGenInputs['NullableUserInput'] | null; // NullableUserInput
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}